/* 
   Author      : Jan Emil Bacher
   Name        : server.c
   Description : Server application used to recieve data from client and pass it further
                 on to system. See different list of commands in documentation/commands.lst
		 Furthermore documentation can be found in report in section regarding server app.
*/
#include <iostream>
#include <algorithm>
extern "C"
{
#include <sys/types.h>
#include <sys/socket.h>
#include "./include/bcm2835.h"
}
#include <string>
#include "./include/comm.hpp"
#include "./include/naviberryio.hpp"
#include "./include/bcmwrapper.hpp"
#include "./include/motordriver.hpp"

int main()
{
  const int   in_port = 1000;
  const char* in_host = "localhost";
  bool prog_running = true;

  Network net("localhost", 1000);
  DC_Motor motor(PIN11, PIN13, PIN15);

  // If we are here, we should now have a connected connection, voila~~~ 
  std::string buffer = "";
  size_t recv_size = 0;

  // Initiaize gpio pins
  if (!bcm2835_init())
    {
      print_error("BCM2835 failed to initialize.\n");
      exit(-1);
    }

  // Setup network connection
  
  // Craete socket
  if (!net.Create())
    {
      print_error("Error trying to create socket");
      exit(-1);
    }
  // Bind socket
  if (!net.Bind())
    {
      print_error("Error trying to create socket");
      exit(-1);
    }
  // Listen on socket
  if (!net.Listen())
    {
      print_error("Error trying to listen on socket");
      exit(-1);
    }
  // Accept connection
  if (!net.Accept())
    {
      print_error("Error accepting connection");
      exit(-1);
    }

  // Setup ports
  // Setup connected LED
  GPIO_setup(PIN5, GPIO_OUT);
  GPIO_out(PIN5, HIGH);


  while (prog_running)
    {
      // Zero set buffer for every run..
      // memset(buffer,0, sizeof(buffer));

      
      // Tell client we are waiting
      printf("Waiting for command..\n");
      net.WriteText(comm_REPLY_WAITING);
      
      // Read text from client
      buffer = net.ReadText();

      // Tell we recieved data
      net.WriteText(comm_REPLY_SUCCESS);
      
      // Check for recognized cmds
      if (buffer.compare("CLIENT_DISCONNECT")==0)
	    {
	      net.WriteText(comm_REPLY_DISCONNECT);
	      prog_running = false;
	    }	  
    }

  // Clear LED
  GPIO_out(PIN5, LOW);


  return EXIT_SUCCESS;
}
